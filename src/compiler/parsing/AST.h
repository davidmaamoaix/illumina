#ifndef ILLUMINA_AST_H
#define ILLUMINA_AST_H

#include <glib.h>
#include <stdbool.h>

#include "common/util/generic_structs.h"
#include "compiler/parsing/generated/Absyn.h"
#include "compiler/parsing/op_lit.h"

/*
 * Due to rapid changes in the frontend of the compiler,
 * a separate syntax tree is constructed independent of
 * the one generated by yacc. Also does not preliminary
 * processing.
 */

#define ATTR_HEADER uint16_t attrs;

#define AST_TRANS_DECL(header) program_t *(header)

typedef struct program_t {

    enum {
        PROGRAM, IMPORT,
        T_SIMP, T_COMP,
        TARG_SIMP, TARG_COVAR, TARG_CONTRA,

        LIT_TUP, LIT_LAM, LIT_INT, LIT_CHR,
        LIT_STR, LIT_LST, LIT_NUL, LIT_FLO,

        EXP_BIN, EXP_UN, EXP_VAR, EXP_FUNC, EXP_LIT,

        STMT_IFE, STMT_WHL, STMT_FOR, STMT_ASN,
        STMT_EXP, STMT_VAR, STMT_BRK, STMT_CON,
        STMT_RET, STMT_RTE,

        MEM_FUNC, MEM_VAR
    } kind;

    union {
        struct {
            GEN_ARRAY_T(struct program_t) imports;
            GEN_ARRAY_T(struct program_t) classes;
            GEN_ARRAY_T(struct program_t) members;
        } program;

        struct {
            uint32_t attrs;
            GEN_ARRAY_T(char *) pkgs;
        } import;

        struct {
            bool nullable;
            char *iden;
        } type_simp;

        struct {
            char *iden;
            GEN_ARRAY_T(struct program_t) params;
        } type_comp;

        char *targ_simp;

        struct {
            char *iden;
            struct program_t *type_node;
        } targ_comp;

        struct {
            struct program_t *type;
            char *iden;
        } var_sig;

        GEN_ARRAY_T(struct program_t) lit_tup;

        struct {
            GEN_ARRAY_T(char *) params;
            GEN_ARRAY_T(struct program_t) stmts;
        } lit_lam;

        uint64_t lit_int;

        gunichar lit_chr;

        char *lit_str;

        GEN_ARRAY_T(struct program_t) lit_lst;

        uint64_t lit_flo;

        char *exp_var;

        struct {
            struct program_t *a;
            char *op;
            struct program_t *b;
        } exp_binop;

        struct {
            char *op;
            struct program_t *value;
        } exp_unop;

        struct {
            char *iden;
            GEN_ARRAY_T(struct program_t) type_params;
            GEN_ARRAY_T(struct program_t) params;
        } exp_call;

        struct program_t *exp_lit;

        struct {
            struct program_t *cond;
            GEN_ARRAY_T(struct program_t) if_stmt;
            GEN_ARRAY_T(struct program_t) else_stmt;
        } stmt_ife;

        struct {
            struct program_t *cond;
            GEN_ARRAY_T(struct program_t) stmt;
        } stmt_whl;

        struct {
            char *var;
            struct program_t *iter;
            GEN_ARRAY_T(struct program_t) stmt;
        } stmt_for;

        struct {
            struct program_t *var;
            op_t op;
            struct program_t *exp;
        } stmt_asn;

        struct program_t *stmt_exp;

        struct {
            GEN_ARRAY_T(struct program_t) defs;
        } var_def;

        struct program_t *stmt_ret;

        struct {
            char *iden;
            struct program_t *ret_type;
            GEN_ARRAY_T(struct program_t) param_sig;
            GEN_ARRAY_T(struct program_t) generic;
        } decl_func;

        struct {
            struct program_t *sig;
            char *iden;
            struct program_t *exp;
            bool initized;
        } decl_var;
    };

} program_t;

AST_TRANS_DECL(gen_ast(Program));
AST_TRANS_DECL(gen_exp(Exp));
AST_TRANS_DECL(gen_import(ImportDecl));

#endif //ILLUMINA_AST_H
