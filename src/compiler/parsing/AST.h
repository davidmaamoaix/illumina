#ifndef ILLUMINA_AST_H
#define ILLUMINA_AST_H

#include <glib.h>
#include <stdbool.h>

#include "common/util/generic_structs.h"
#include "compiler/parsing/generated/Absyn.h"

/*
 * Due to rapid changes in the frontend of the compiler,
 * a separate syntax tree is constructed independent of
 * the one generated by yacc.
 */

#define ATTR_HEADER uint16_t attrs;

#define SYN_OP uint8_t

struct _targ_node;
typedef struct _targ_node targ_node_t;

struct _type_node;
typedef struct _type_node type_node_t;

struct _decl_node;
typedef struct _decl_node decl_node_t;

struct _sig_node;
typedef struct _sig_node sig_node_t;

struct _stmt_node;
typedef struct _stmt_node stmt_node_t;

struct _exp_node;
typedef struct _exp_node exp_node_t;

struct _mem_node;
typedef struct _mem_node mem_node_t;

struct _lit_node;
typedef struct _lit_node exp_lit_t;

struct _type_node {
    enum { T_SIMP, T_COMP } kind;
    bool nullable;

    union {
        char *simp_iden;
        struct {
            char *iden;
            GEN_ARRAY_T(type_node_t) params;
        } generic;
    } type;
};

struct _targ_node {
    enum { TARG_SIMP, TARG_COVAR, TARG_CONTRA };
    union {
        char *simp_iden;
        struct {
            char *iden;
            type_node_t type_node;
        } comp;
    } arg;
};

struct _sig_node {
    type_node_t type;
    char *iden;
};

struct _lit_node {
    enum {
        LIT_TUP, LIT_LAM, LIT_INT, LIT_CHR,
        LIT_STR, LIT_LST, LIT_NUL, LIT_FLO
    } kind;
    union {
        GEN_ARRAY_T(exp_node_t) lit_tup;
        struct {
            GEN_ARRAY_T(char *) params;
            GEN_ARRAY_T(stmt_node_t) stmts;
        } lit_lam;
        uint64_t lit_int;
        gunichar lit_chr;
        char *lit_str;
        GEN_ARRAY_T(exp_node_t) lit_lst;
        uint64_t lit_flo;
    } lit;
};

struct _exp_node {
    enum { EXP_BIN, EXP_UN, EXP_VAR, EXP_FUNC, EXP_LIT } kind;
    union {
        char *variable;
        struct {
            exp_node_t *a;
            char *op;
            exp_node_t *b;
        } bin_exp;
        struct {
            char *op;
            exp_node_t *value;
        } un_exp;
        struct {
            char *iden;
            GEN_ARRAY_T(type_node_t) type_params;
            GEN_ARRAY_T(exp_node_t) params;
        } func_call;
        exp_lit_t lit;
    } exp;
};

struct _stmt_node {
    enum {
        STMT_IFE, STMT_WHL, STMT_FOR,
        STMT_ASN, STMT_EXP, STMT_VAR,
        STMT_BRK, STMT_CON, STMT_RET,
        STMT_RTE
    } kind;
    union {
        struct {
            exp_node_t cond;
            GEN_ARRAY_T(stmt_node_t) if_stmt;
            GEN_ARRAY_T(stmt_node_t) else_stmt;
        } ife;
        struct {
            exp_node_t cond;
            GEN_ARRAY_T(stmt_node_t) stmt;
        } whl;
        struct {
            char *var;
            exp_node_t iter;
            GEN_ARRAY_T(stmt_node_t) stmt;
        } fr;
        struct {
            char *var;
            SYN_OP op;
            exp_node_t exp;
        } asn;
        exp_node_t exp;
        struct {
            GEN_ARRAY_T(sig_node_t) defs;
        } var_def;
        exp_node_t ret;
    } stmt;
};

struct _mem_node {
    enum { MEM_FUNC, MEM_VAR } kind;
    uint32_t attrs;

    union {
        struct {
            char *iden;
            type_node_t ret_type;
            GEN_ARRAY_T(sig_node_t) param_sig;
            GEN_ARRAY_T(targ_node_t) generic;
        } func_decl;

        struct {
            sig_node_t sig;
            char *iden;
            exp_node_t exp;
            bool initized;
        } var_decl;
    } decl;
};

void n_import_conv_path();

#endif //ILLUMINA_AST_H
